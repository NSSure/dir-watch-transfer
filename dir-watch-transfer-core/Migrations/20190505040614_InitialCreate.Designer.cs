// <auto-generated />
using System;
using DirWatchTransfer.Core.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DirWatchTransfer.Core.Migrations
{
    [DbContext(typeof(DirWatchTransferContext))]
    [Migration("20190505040614_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("DirWatchTransfer.Core.Entity.ActivityHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<int>("EntityID");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("ActivityHistory");
                });

            modelBuilder.Entity("DirWatchTransfer.Core.Entity.ScheduledSync", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.Property<int>("Interval");

                    b.Property<DateTime>("LastSync");

                    b.Property<int>("SymbolicLinkID");

                    b.HasKey("ID");

                    b.ToTable("ScheduledSync");
                });

            modelBuilder.Entity("DirWatchTransfer.Core.Entity.Settings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("EnableForcedDirectoryCopiesNotifications");

                    b.Property<bool>("EnableNewSymbolicLinkNotifications");

                    b.Property<bool>("EnableNewSyncNotifications");

                    b.Property<bool>("EnableNewWatcherNotifications");

                    b.Property<bool>("EnableNotifications");

                    b.Property<bool>("EnableWatcherFileSyncsNotifications");

                    b.Property<string>("LogFileFormat");

                    b.Property<string>("LogFilePath");

                    b.Property<bool>("LogForcedDirectoryCopies");

                    b.Property<bool>("LogNewSymbolicLinks");

                    b.Property<bool>("LogNewSyncs");

                    b.Property<bool>("LogNewWatchers");

                    b.Property<bool>("LogWatcherFileSyncs");

                    b.HasKey("ID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("DirWatchTransfer.Core.Entity.SymbolicLink", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttributeCount");

                    b.Property<int>("CopyCount");

                    b.Property<int>("CreationTimeCount");

                    b.Property<int>("DirectoryNameCount");

                    b.Property<int>("FileNameCount");

                    b.Property<int>("LastAccessCount");

                    b.Property<int>("LastWriteCount");

                    b.Property<string>("Name");

                    b.Property<int>("SecurityCount");

                    b.Property<int>("SizeCount");

                    b.Property<string>("Source");

                    b.Property<string>("Target");

                    b.HasKey("ID");

                    b.ToTable("SymbolicLink");
                });

            modelBuilder.Entity("DirWatchTransfer.Core.Entity.Watcher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttributeCount");

                    b.Property<int>("CopyCount");

                    b.Property<int>("CreationTimeCount");

                    b.Property<int>("DirectoryNameCount");

                    b.Property<int>("FileNameCount");

                    b.Property<int>("LastAccessCount");

                    b.Property<int>("LastWriteCount");

                    b.Property<bool>("Recursive");

                    b.Property<int>("SecurityCount");

                    b.Property<int>("SizeCount");

                    b.Property<int>("SymbolicLinkID");

                    b.Property<bool>("WatchCreationTime");

                    b.Property<bool>("WatchDirectoryName");

                    b.Property<bool>("WatchFileName");

                    b.Property<bool>("WatchLastAccess");

                    b.Property<bool>("WatchLastWrite");

                    b.Property<bool>("WatchSecurity");

                    b.Property<bool>("WatchSize");

                    b.HasKey("ID");

                    b.ToTable("Watcher");
                });
#pragma warning restore 612, 618
        }
    }
}
